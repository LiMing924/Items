RSA_Encryption类说明文档

RSA_Encryption类是一个用于RSA加密和签名的工具类。RSA是一种非对称加密算法，使用公钥加密数据，使用私钥解密数据。同时，私钥也可以用于对数据进行签名，公钥可以用于验证签名的正确性。RSA算法广泛应用于安全通信、数字签名等领域。

使用RSA_Encryption类可以方便地进行RSA加密和签名，同时提供了各种转换方法，可以将公钥、私钥、签名等数据转换为字符串格式，方便存储和传输。

主要方法：

1. getKeyPairGenerator方法

该方法返回一个KeyPairGenerator对象，用于生成RSA密钥对。

2. getKeyPair方法

该方法返回一个KeyPair对象，包含公钥和私钥。

3. getPublicKey方法

该方法返回公钥对象。

4. getPrivateKey方法

该方法返回私钥对象。

-----以下为static方法-------

5. encrypt方法

该方法使用私钥对输入字符串进行签名，返回签名结果的字节数组。

6. encode方法

该方法使用公钥对明文进行加密，返回加密后的密文的字节数组。

7. decode方法

该方法使用私钥对密文进行解密，返回解密后的明文。

8. signatureToString方法

该方法将签名字节数组转换为字符串格式。

9. stringToSignature方法

该方法将签名字符串转换为字节数组格式。

10. decrypt方法

该方法使用公钥对输入字符串进行验证，返回验证结果。

11. KeyToString方法

该方法将公钥或私钥转换为字符串格式。

12. stringToPublicKey方法

该方法将公钥字符串转换为公钥对象。

13. stringToPrivateKey方法

该方法将私钥字符串转换为私钥对象。

14. generate方法

该方法生成指定长度的随机字符串。

使用示例：

1. 生成RSA密钥对

RSA_Encryption rsa = new RSA_Encryption();
KeyPair keyPair = rsa.getKeyPair();

2. 获取公钥和私钥

PublicKey publicKey = rsa.getPublicKey();
PrivateKey privateKey = rsa.getPrivateKey();

3. 对字符串进行签名

String str = "Hello, world!";
byte[] signature = RSA_Encryption.encrypt(str, privateKey);

4. 对明文进行加密

byte[] encrypted = RSA_Encryption.encode(str, publicKey);

5. 对密文进行解密

String decrypted = RSA_Encryption.decode(encrypted, privateKey);

6. 将公钥转换为字符串格式

String publicKeyString = RSA_Encryption.KeyToString(publicKey);

7. 将字符串格式的公钥转换为公钥对象

PublicKey publicKey = RSA_Encryption.stringToPublicKey(publicKeyString);

8. 生成随机字符串

String randomString = RSA_Encryption.generate(16);